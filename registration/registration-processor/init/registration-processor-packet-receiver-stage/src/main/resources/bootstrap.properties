spring.cloud.config.uri=http://localhost:51000
spring.cloud.config.label=master
spring.profiles.active=local
spring.application.name=application,registration-processor
spring.cloud.config.name=registration-processor
management.endpoints.web.exposure.include=refresh
registration.processor.zone=dmz
vertx.cluster.configuration=${spring.cloud.config.uri}/*/${spring.profiles.active}/${spring.cloud.config.label}/hazelcast_${registration.processor.zone}.xml
#management.security.enabled=false
server.port=8081
server.servlet.path=/registrationprocessor/v1/packetreceiver
packet.receiver.stage=registration-processor-packet-receiver-stage
config.server.file.storage.uri=${spring.cloud.config.uri}/${packet.receiver.stage}/${spring.profiles.active}/${spring.cloud.config.label}/

#disabling health check so that client doesnt try to load properties from sprint config server every
# 5 minutes (should not be done in production)
health.config.enabled=false
eventbus.port=5711
#Kafka event bus configruations
mosip.regproc.eventbus.kafka.commit.type=${mosip.regproc.packet.receiver.eventbus.kafka.commit.type}
mosip.regproc.eventbus.kafka.max.poll.records=${mosip.regproc.packet.receiver.eventbus.kafka.max.poll.records}
mosip.regproc.eventbus.kafka.poll.frequency=${mosip.regproc.packet.receiver.eventbus.kafka.poll.frequency}
mosip.regproc.eventbus.kafka.group.id=${mosip.regproc.packet.receiver.eventbus.kafka.group.id}
#Since packet is not even uploaded to packetmanager, tag loading to message is disabled
mosip.regproc.message.tag.loading.disable=true


javax.persistence.jdbc.driver=org.postgresql.Driver
hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect
javax.persistence.jdbc.url=jdbc:postgresql://localhost:5432/mosip_regprc
javax.persistence.jdbc.user=postgres
javax.persistence.jdbc.password=postgres
hibernate.ddl-auto=update
hibernate.temp.use_jdbc_metadata_defaults = false

mosip.regproc.virusscanner.provider="VirusScannerImpl"

#Registration Transaction Version
mosip.registration.processor.transaction.version=1.0

#--------------Reprocessor stage----------------

#Number of the reprocess records to be fetched at a time
registration.processor.reprocess.fetchsize=100


# The maximum reprocess count. Beyond this the rid will not be considered for reprocessing.
registration.processor.reprocess.attempt.count=300
# Reprocess type
registration.processor.reprocess.type=cron
#schedular seconds configuration
registration.processor.reprocess.seconds=0
#schedular minutes configuration
registration.processor.reprocess.minutes=0
#schedular hours configuration
# Under assumption of about 2 hrs of downtime for regproc on daily basis, the reprocessor 
# frequency is made to 3 hours once
registration.processor.reprocess.hours=0,3,6,9,12,15,18,21
#schedular days configuration
registration.processor.reprocess.days_of_month=*
#schedular months configuration
registration.processor.reprocess.months=*
#schedular weeks configuration
registration.processor.reprocess.days_of_week=*

registration.processor.main-processes=NEW,UPDATE,LOST,RES_UPDATE,ACTIVATE,DEACTIVATE
registration.processor.sub-processes=BIOMETRIC_CORRECTION
config.server.file.storage.uri=${spring.cloud.config.uri}/${spring.profiles.active}/${spring.cloud.config.label}/
registration.processor.identityjson=registration-processor-identity.json

#----For CBEFF Component----

#CBEFF XSD Storage URI. Should not be modified
mosip.kernel.xsdstorage-uri = file://

#CBEFF XSD File Location. Should not be modified
mosip.kernel.xsdfile = 127.0.0.1

#----JSON Validator Component----

#Property Source of the Identity Schema. LOCAL specifies the schema is stored within the application. Should not be modified
mosip.kernel.jsonvalidator.property-source = LOCAL

#Storage Location of the Identity Schema. LOCAL specifies the schema is stored within the application. Should not be modified
mosip.kernel.jsonvalidator.file-storage-uri=LOCAL


####################################################################################################
#------------------------------------ REGPROC SERVICES PROPERTIES ----------------------------------
####################################################################################################

#-------------------------------------Registration Status service----------------------------------#

# Exposed API ids and versions used for request validation
mosip.registration.processor.registration.status.id=mosip.registration.status
mosip.registration.processor.registration.sync.id=mosip.registration.sync
mosip.registration.processor.lostrid.id=mosip.registration.lostrid
# Registration External Status Id
mosip.registration.processor.registration.external.status.id=mosip.registration.external.status
mosip.registration.processor.sync.version=1.0
mosip.registration.processor.registration.status.version=1.0
mosip.registration.processor.lostrid.version=1.0
# Registration External Status Version
mosip.registration.processor.registration.external.status.version=1.0

# Maximum no of time client is allowed to upload a packet on failure
registration.processor.max.retry=3

# The comma separate list of external statuses that should be considered as processed 
# for search API response consumed by regclient
mosip.registration.processor.registration.status.external-statuses-to-consider-processed=UIN_GENERATED,REREGISTER,REJECTED,REPROCESS_FAILED	

# this property is used in lostrid api to get postal code 
mosip.registration.processor.postalcode.req.url=${mz.ingress.url}/v1/masterdata/registrationcenters

####################################################################################################
#------------------------------------- STAGE SPECIFIC PROPERTIES -----------------------------------
####################################################################################################

#-----------------------------------------Packet Receiver Stage------------------------------------#

# Supported commmit config: auto, batch, single
mosip.regproc.packet.receiver.eventbus.kafka.commit.type=single
# Maximum records that can be received in one poll from kafka
mosip.regproc.packet.receiver.eventbus.kafka.max.poll.records=100
# Interval between each poll calls to kafka in milli sec
mosip.regproc.packet.receiver.eventbus.kafka.poll.frequency=100
# Kafka consumer group id, used by kafka to identify multiple instances of the same consumer
mosip.regproc.packet.receiver.eventbus.kafka.group.id=packet-receiver-stage

# Base sevlet path for the stage
mosip.regproc.packet.receiver.server.servlet.path=/registrationprocessor/v1/packetreceiver
# Port number in which the application will run
mosip.regproc.packet.receiver.server.port=8081
# Port number to be used by eventbus for communicating with other vertx apps in the cluster
mosip.regproc.packet.receiver.eventbus.port=5711

# Flag to disable the copying of tags from the packet manger to the message event
mosip.regproc.packet.receiver.message.tag.loading.disable=true
#Maximum file size to be upload from packet receiver
registration.processor.max.file.size=5
# Module id that should be added in the responses
mosip.registration.processor.packet.id=REGISTRATION

mz.ingress.url=""

#------------------------------------Other common libraries properties-----------------------------#

# Landing zone folder where uploaded files are temporarily kept
registration.processor.LANDING_ZONE = /mnt/regproc/landing

# The IDSchemaVersion used to create packets in reg-proc
IDSchema.Version=1.0

# Base base package to be used for scanning components of the IAM adapter to autowire
mosip.auth.adapter.impl.basepackage=io.mosip.kernel.auth.defaultadapter

# Token generation request details
token.request.id=io.mosip.registration.processor
token.request.appid=regproc
token.request.version=1.0
token.request.clientId=mosip-regproc-client 
token.request.secretKey={cipher}215f555ae8266e12fed8144620b34fa3f2be2f805a3d28f9e0cfca3e777d18db
token.request.issuerUrl=${mosipbox.public.url}/keycloak/auth/realms/mosip

# Request id to be used for various internal services
mosip.registration.processor.digital.signature.id=io.mosip.registration.processor
mosip.registration.processor.audit.id=mosip.applicanttype.getApplicantType
mosip.registration.processor.crypto.decrypt.id=mosip.cryptomanager.decrypt

# Kernel Crypto signature
registration.processor.signature.isEnabled=true

# The elapse time beyond which the rids will be considered for reprocessing
registration.processor.reprocess.elapse.time=300

# Virus Scanner Connection details
mosip.kernel.virus-scanner.host=clamav 
mosip.kernel.virus-scanner.port=80

# Extension used for the packets
registration.processor.packet.ext=.zip
# Id used for referencing keys in keymanager belonging to regproc module
registration.processor.application.id=REGISTRATION
# Substring index used to identity machine id in registration id
registration.processor.rid.machineidsubstring=10
# Version string that will be used in the reponses
mosip.registration.processor.application.version=1.0
# Date time pattern that should be followed in timestamp for both request and response
mosip.registration.processor.datetime.pattern=yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
# Timezone that is expected to be followed in the request and response
mosip.registration.processor.timezone=GMT
# Allowed time difference between the request time and the curren time
mosip.registration.processor.grace.period=10800

# The list of comma separated stages that should be successfully completed before packet 
# reaches the stage that uploads packets to the packet store 
mosip.registration.processor.registration.status.stages-before-reaching-packet-store=PacketReceiverStage,SecurezoneNotificationStage

# Stage Group Configuratoins
# Default base packages for stage beans to be scanned in a stage group
mosip.regproc.mosip-stage-executor.stage-beans-base-packages.default=io.mosip.registration.processor,io.mosip.registrationprocessor,io.mosip.registartion.processor
# Add any new base package of Stage bean specific to stage group as below
# mosip.regproc.stage-groups.stage-beans-base-packages.<stage_group_name>=${mosip.regproc.stage-groups.stage-beans-base-packages.default}
# Example: mosip.regproc.stage-groups.stage-beans-base-packages.stage-group-1=${mosip.regproc.stage-groups.stage-beans-base-packages.default},my.stage.bean.base.package

# Mostly used for forming the config server URI in stages
packet.info.storage.service=*

#--------------------------------Registration core library properties------------------------------#

# Regproc supported eventbus types: vertx, kafka. Defaults to vertx if the config is not present
mosip.regproc.eventbus.type=kafka

# Kafka event bus config, will be used only when the type is kafka
# Kafka cluster servers comma separated, common for all stages and camel bridge
mosip.regproc.eventbus.kafka.bootstrap.servers=kafka-0.kafka-headless.default.svc.cluster.local:9092,kafka-1.kafka-headless.default.svc.cluster.local:9092,kafka-2.kafka-headless.default.svc.cluster.local:9092

# workel pool size to process multiple requests parallely by stages
worker.pool.size=10